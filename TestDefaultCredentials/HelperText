Using SSH and Telnet to test default credentials on a system.

This code will do sshlogin and telnet login

Here we are checking sshlogin and telnet. This combination is useful because computuer runs ssh serv


There we are using library called paramiko to implement ssh for us.

 ssh = paramiko.SSHClient() # start SSH client
So accessing the sshclient and then perform a request using password rather than host keys

ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) # if public key not trusted, create a trusted key
If we dont have server key enabled, which we dont because we are scanning, we are going to say that we ignore 
the fact that server host key isnt in our list of trusted key. Which is perfect sense because we wont require user interaction and accept the key 
and we certainly dont want the connection to fail because of dont having server key

ssh.connect(host,port=port,username=username,password=password) # test credentials on SSH
It takes host (may be localhost for this time) , and port (may be 22) and username and password from default.txt file

ssh_session = ssh.get_transport().open_session() # create session
Then we attempt to open a session and try to connect to this.

if section:
Here we testing whether we have or not active session.
IF you have active session after providing username and password, that means your login was sucessful and so that means the username and password are valid set of credentials
for that particular machine.

If we dont have an active session


The other option is telnet. I menetioned that the IOT devices often have default credentials and often have telnet running. So having
a telnet based credentials is also good.

def TelnetLogin(host,port,username,password):
   user = bytes(username + "\n", "utf-8")
    passwd= bytes(password + "\n", "utf-8")

Here we are using username and password as bytes and then we use them later at some point

 tn = telnetlib.Telnet(host,port,timeout=1) # launch Telnet session
In this case, we are using telnetlib library and the above will set up a session on host and that port 23.

    tn.read_until(b"Login: ") # wait for login prompt
Then we are using read_until command of telnetlib. What it do? It takes a particular things to look for , it 
keep reading the data after the wire until its sees the particular thing. In our case
it looing for login part. So this is nt the login prompt used by the particular system and then they customized 
in some way, this is going to . It will only work if we have the correct login part. If it did , it write the username on nextline.
    tn.write((username + "\n").encode("utf-8")) # write username and encode with utf-8


    tn.read_until(b"Password: ") # then wait for password prompt
Here againg read until, we look for password login prompt. Once we receive that, we again provide the password.
    tn.write((password + "\n").encode("utf-8")) # write passsword in password prompt. Then encode in utf-8



Then we have try expect login here as well
try:
        result = tn.expect([b"Last login"]) # get last login time
        # if last login time is over 0
        if (result[0] > 0):
            # print out a login successful message
            print("Telnet login successful on %s:%s with username %s\
                and password %s" % (host,port,username,password))
        tn.close()
    # create exception for EOFError and timeout errors
    except (EOFError,socket.timeout):
        # print out a failure message
        print("Telnet login failed %s %s" % (username,password))

In this case we will use something similar to readuntil. So here if it expect Here we are taking advantage that lot of telnet server often will say that time and date
of last successful login. So if we see last login gives us, we know that we successfully logged in telnet. There we also going to set a timeout, so that we dont need to
listening forever.
In this way, we can ensure that our code run very quickly. here we give timeout=2 based on the calculation where the service will respond and have that balanced
between runtime and also essentially giving them enough time to respond it.
So how expect works: ITs going to return stuffs in our variable result. And what will happen is that it will return a tuple (The first value in that tuple)
it indexed with all expected value will be atleast zero. If doesnt happen then the indexed value will be atleast is negative. Because there is no index, which are
expected value to occur

So in try block, we are testing the first value of the tuple. If its greater than or equalto 0, then means, we got a message that included phrase "Last login" and so we 
have a successful telnet connection.
Then its print out the Telnet login successfull on this ip and port with username and this password. And then we will close the telnet connection.

If we end up and get file error, if that happens , we say login failed with the provided username and password.

Conclusion:
The goal here is to write a python script that uses two different protocols ssha and telnet to determine if a target system uses the set of default credentials



